

Events für Resourcenscan hinzugefügt

-> Logik für Dorfspawnen an Bedingungen wie Essen oder Wasser knüpfen
-> Villagerlogik hinzufügen

Was wäre denn wenn ich die Scanlogiken einfach komplett miteinander verknüpfe und in einer Methode durchlaufen lasse
Die übersichtlichkeit würde leiden - allerdings hätte ich deutlich weniger aufrufe.

Ansatz 

#1. Die Instanzierung der Eventargs muss generisch laufen - entweder regel ich das über Typabstraktion oder über eine generische Klasse, die via dependenyinjcention arbeitet
	PRO : Wenn das Grundgerüst läuft ist es theoretisch Leistungsoptimiert erweiterbar.
		  Hier kann am Schluss mit Referenzwerten gearbeitet werden
		  Individuelle Calls von Villages zu individuellen Situationen

	CONTRA : Kompliziert zu schreiben, Lambdafunktionen müssen Typsicher angepasst werden und das arbeiten mit den Events wird schwieriger



#2. Eine Eventargklasse schreiben, welche sämtliche Infos erhält und an die man Anfragen einfach anknüpfen kann.
	PRO : Es wird von einem Dorf genau ein Call benötigt um alle Infos aus der Umgebung zu bekommen.
		  Es wird nur noch eine Methode benötigt die alles weitere co-ordiniert.

	CONTRA : Es sind keine individuellen Aufrufe mehr verfügbar, sondern es müssen Situationsbedingt Infos aus der OmniEvenmtklasse gefiltert werden -> unnütze Datenlast




-> Handel zwischen den einzelnen Dörfern
-> Krankheiten

-> Sterben/Neuentstehung der Dörfer
	{
		Dafür eine neue Klasse - ProgressHandler - alles was mit Löschen,Neu spawnen, Gold und Villagern an sich zu tun hat
	}

-> Veränderung der Ressourcen (Villeicht limitierung?)
	-> Verbrauch von Resourcen Pro Dorf das diese nutzt
	